//const bot = require('telegram-bot')

//const token = '7470611522:AAFx54mg6SHFfLtxojBw45it17qYmYPdkaQ'

const { Telegraf, Markup } = require('telegraf')
const { message } = require('telegraf/filters')
require('dotenv').config()
//const COMMANOS = require('./modeles/const')
const group = require('./modeles/group')
const game = require('./modeles/game')
const partner = require('./modeles/partner')
const father = require('./modeles/father')
const youtube = require('./modeles/yotutube')
const text = require('./const')

const bot = new Telegraf(process.env.BOT_TOKEN)

bot.start((ctx) =>  ctx.reply('–ü—Ä–∏–≤–µ—Ç, ' 
    + ctx.message.from.first_name 
    + '! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —è –º–æ–≥—É –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É - /help'
    +' –∏–ª–∏ –Ω–∞–∂–º–∏ /comand –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –±–æ—Ç–∞') 
    ? ctx.message.from.first_name : "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü")
// bot.on('message', (ctx) => {
//     if(ctx.message.location){
//             //ctx.reply('–ó–¥–æ—Ä–æ–≤–∞')
//             //ctx.reply('–ó–¥–æ—Ä–æ–≤–∞')
//             console.log(ctx.message.location)
//     }
// })

function addActionBot(name, src, text){
    bot.action(name, async (ctx) => {
        try{
            await ctx.answerCbQuery()
            if (src !== false){
                await ctx.replyWithPhoto({
                    source: src
                })
            }
            await ctx.replyWithHTML(text, {
                disable_web_page_preview: true
            })
        } catch(e){
            console.error(e)
        }
    })
}

bot.command('father', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ò–∑–º–∏–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞','btn_father')]
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

addActionBot('btn_father', false, father[0][0])

bot.command('comand', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–í–ö –≥—Ä—É–ø–ø—ã','btn_group_vk'),Markup.button.callback('–¢–ì –≥—Ä—É–ø–ø—ã','btn_group_tg')],
                [Markup.button.callback('–ò–≥—Ä—ã –≤ –í–ö','btn_game_vk')],
                [Markup.button.callback('–ö–∞–Ω–∞–ª—ã –¢–ì','btn_partner_tg')],
                [Markup.button.callback('YouTube','youtube')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.help((ctx) =>  ctx.reply(text.comands))
bot.command('group', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ì—Ä—É–ø–ø—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–í–ö –≥—Ä—É–ø–ø—ã','btn_group_vk')],
                [Markup.button.callback('–¢–ì –≥—Ä—É–ø–ø—ã','btn_group_tg')]
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.action('btn_group_vk', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ì—Ä—É–ø–ø—ã BK</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–í–ö –ø—è—Ç–Ω–∞—à–∫–∏','btn_vk_1')],
                //[Markup.button.callback('–í–ö','btn_1'),Markup.button.callback('–¢–ì','btn_2')]
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

addActionBot('btn_vk_1', './img/1.jpg', group[0][0])

bot.action('btn_group_tg', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ì—Ä—É–ø–ø—ã –¢–ì</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ò–≥—Ä—É–ª—å–∫–∏','btn_tg_1')],
                [Markup.button.callback('–¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞','btn_tg_2')]
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

addActionBot('btn_tg_1', './img/2.jpg', group[1][0])
addActionBot('btn_tg_2', false, group[1][1])

bot.command('game', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ò–≥—Ä—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ò–≥—Ä—ã –≤ –í–ö','btn_game_vk')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.action('btn_game_vk', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ò–≥—Ä—ã –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ö–ª–∞—Å—Å–∏—á–µ—Å–∏–µ –ü—è—Ç–Ω–∞—à–∫–∏','btn_game_1')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

addActionBot('btn_game_1', './img/3.jpg', game[0][0])

bot.command('partner', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ü–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ö–∞–Ω–∞–ª—ã –¢–ì','btn_partner_tg')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.action('btn_partner_tg', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ü–∞—Ä—Ç–Ω–µ—Ä—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–¢–≥ –ö–∞–Ω–∞–ª','btn_partner_1')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

addActionBot('btn_partner_1', false, partner[0][0])

bot.command('youtube', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>YouTube</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ö–∞–Ω–∞–ª','btn_youtube_0'), Markup.button.callback('–ü–ª–µ–π –ª–∏—Å—Ç—ã','btn_youtube')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.action('youtube', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>YouTube</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–ö–∞–Ω–∞–ª','btn_youtube_0'), Markup.button.callback('–ü–ª–µ–π –ª–∏—Å—Ç—ã','btn_youtube')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.action('btn_youtube_0', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ö–∞–Ω–∞–ª</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('Rebotica  Mentor Pavel','btn_youtube_1')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

bot.action('btn_youtube', async (ctx) => {
    try{
        await ctx.replyWithHTML('<b>–ü–ª–µ–π –ª–∏—Å—Ç—ã</b>', Markup.inlineKeyboard(
            [
                [Markup.button.callback('–û–±–∑–æ—Ä –∏–≥—Ä','btn_youtube_2')],
            ]
        ))
    } catch(e){
        console.error(e)
    }
})

addActionBot('btn_youtube_1', false, youtube[0][0])
addActionBot('btn_youtube_2', false, youtube[1][0])

//bot.on(message('sticker'), (ctx) => ctx.reply('üëç'))
//bot.hears('–õ–æ—Ö', (ctx) => ctx.reply('–ì–∞–ø–µ–µ–≤ –Ω–µ –±–∞–ª—É–π—Å—è!!!'))
bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))